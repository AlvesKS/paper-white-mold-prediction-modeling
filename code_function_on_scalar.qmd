---
title: "Function-on-Scalar regressions for the white mold data"
author: "Denis Shah"
date: "`r format(Sys.time(), '%d %B, %Y')`"
---


```{r setup, include=FALSE, eval=TRUE}
options(digits = 3)
require(knitr)
## options
knitr::opts_chunk$set(eval = TRUE, echo = T, cache = FALSE, warning = FALSE, message = FALSE)
```

## Packages
```{r Libraries, echo=T, eval=TRUE, message=FALSE, warning=FALSE}
library(fda)
library(refund)
library(fdatest)
library(tidyverse)
library(tictoc)
library(cowplot)
library(kableExtra)
```

## Load and process the data
```{r Load-and-process-the-data}
wm_load <- readr::read_csv(here::here("Data", "data_model_plus_weather_filtered.csv"), show_col_types = FALSE)

# Simplify things. Keep only the weather-related variables and others needed for calculations
wm_data <-
  wm_load %>%
  dplyr::select(subject, date, planting.date, sampling.date, wm, d2m, t2m_mean, t2m_max, t2m_min, st, sp, sm, rh) %>%
  # Do the filtering steps before doing any calculations or feature engineering:
  # wm_load has identical data for each of the sampling dates, which is why there is a filtering step on sampling.date.
  dplyr::group_by(subject) %>% 
  dplyr::filter(sampling.date == max(sampling.date)) %>%
  dplyr::ungroup() %>% 
  # Add the response variable (wm present or absent; binary):
  dplyr::group_by(subject) %>% 
  dplyr::mutate(wm = (mean(wm, na.rm = T) > 0)*1) %>% 
  # wm as a factor:
  dplyr::mutate(wm = factor(wm, levels = c(0, 1))) %>%
  dplyr::ungroup() %>% 
  dplyr::filter(!is.na(wm)) %>% 
  # Calculate dap (as a numeric):
  dplyr::mutate(dap = as.numeric(date - planting.date)) %>%
  # Convert temperatures from Kelvin to degrees Celsius:
  dplyr::mutate(across(d2m:st, ~ .x - 273.15)) %>%
  # dewpoint depression:
  dplyr::mutate(dpd = t2m_mean - d2m) %>%
  # surface pressure in kPa:
  dplyr::mutate(sp = sp/1000) %>%
  # Ratio of soil temperature to soil moisture:
  dplyr::mutate(stsm = st/sm) %>%
  # Difference in max and min temperatures:
  dplyr::mutate(tdiff = t2m_max - t2m_min) %>%
  # Calculate saturation vapor pressure (es):
  dplyr::mutate(es = 0.61078 * exp((17.27 * t2m_mean) / (t2m_mean + 237.3))) %>% 
  # Calculate actual vapor pressure (ea):
  dplyr::mutate(ea = (rh / 100) * es) %>% 
  # Calculate VPD (kPa):
  dplyr::mutate(vpd = es - ea) %>% 
  # estimate GDD (base 0). NB: base 0 is reasonable for snap bean; see the Jenni et al. (2000) paper. I think we want GDD to start accumulating the day after planting date onwards...
  # I use the day after planting, because we don't know exactly what time of the day the field was planted.
  dplyr::mutate(gddi = ifelse(dap <= 0, 0, (t2m_max + t2m_min)*0.5 - 0)) %>%
  dplyr::group_by(subject) %>% 
  # We don't want the gddi column after creating gdd:
  dplyr::mutate(gdd = cumsum(gddi), .keep = "unused") %>%
  dplyr::ungroup() %>%
  # Keep only the columns you need:
  dplyr::select(subject, dap, wm:gdd, -es, -ea) %>%
  # Filter the dataset to dap <= 50:
  dplyr::filter(dap <= 50) %>%
  # wm as a contrast: -1 = absent, 1 = present (needed for function-on-scalar regression):
  dplyr::mutate(wm = as.numeric(wm)-1) %>%
  dplyr::mutate(wm = 2*wm-1) 
```

```{r fos-functions}
data.prep <- function(x) {
  # Prepare the data for function-on-scalar regression
  # N x J matrix of the functional predictor 
  # Args:
  #  x = unquoted variable name
  # Returns:
  #  a list with the following named elements:
  #   y = N x J matrix of the functional response
  #   x = a vector of the wm status coded as -1, 1
  #   yind =  a vector of the evaluation days, which is of length 81 from -30 to 50
  
  .x <- enquo(x)
  
  # The environmental data:
  ez <-
    wm_data %>%
    dplyr::select(subject, dap, !!.x) %>%
    tidyr::pivot_wider(id_cols = subject, names_from = dap, names_prefix = "", values_from = !!.x) %>%
    dplyr::select(-subject) %>%
    as.matrix()
  
  colnames(ez) <- NULL
  
  # the vector of wm status:
  x.wm <- 
    wm_data %>%
    dplyr::group_by(subject) %>%
    dplyr::summarise(wm = mean(wm)) %>%
    dplyr::pull(wm)
  
  # the vector of the evaluation days:
  days <- seq(-30, 50)
  
  # the final data frame:
  df <- list(y = ez, x = x.wm, yind = days)
  
  return(df)
  
}

# Example of use:
# dat <- data.prep(d2m)

fANOVA <- function(dat) {
  # Performs a functional ANOVA and plots the estimated coefs for the overall mean and 
  # the difference between wm(0) and wm(1).
  #
  # Args:
  #   dat: prepared data from calling the data.prep function
  #
  # Returns:
  #   a ggplot graphic of the estimated beta(t) coefs.
  
  
  # k = 30 gives wiggliness, no oversmoothing
  m2 <- pffr(y~x, yind = dat$yind, data = dat,
             bs.yindex = list(bs = "ps", k = 30, m = c(2, 1)), 
             bs.int = list(bs = "ps", k = 30, m = c(2, 1)))
  
  
  # The smooth coefficients for the overall mean and beta(t):
  z <- coef(m2)$smterms
  
  # 1. For the overall mean:
  a1 <- z[[1]]$coef[, "yindex.vec"]
  a2 <- z[[1]]$coef[, "value"]
  a3 <- z[[1]]$coef[, "se"]
  
  # 2. For beta(t):
  b1 <- z[[2]]$coef[, "yindex.vec"]
  b2 <- z[[2]]$coef[, "value"]
  b3 <- z[[2]]$coef[, "se"]

  
  # Extract parts of the output to produce a more attractive plot in ggplot.
  # The coefs for the overall mean, adding an approx. 95% CI:
  X <- data.frame(x = a1, coef.mean = a2, lower.mean = a2 - 1.96*a3, upper.mean = a2 + 1.96*a3, coef = "Overall mean")
  
  # The coefs for the time trend of the mean difference between epidemics and non-epidemics:
  Y <- data.frame(x = b1, coef.mean = b2, lower.mean = b2 - 1.96*b3, upper.mean = b2 + 1.96*b3, coef = "Difference")
  
  Z <- rbind(X, Y)
  
  # To get different lines in each facet, you need another data.frame:
  hline.data <- data.frame(z = c(0), coef = c("Difference"))
  
  breaks <- seq(-30, 50, 10)
  labels <- seq(-30, 50, 10)
  
  Z %>%
  dplyr::mutate(coef = factor(coef, levels = c("Difference", "Overall mean"))) %>%
  ggplot(., aes(x = x, y = coef.mean)) +
  annotate("rect", ymin = -Inf, ymax = Inf, xmin = 35, xmax = 50, fill = "steelblue", alpha = 0.2) +
  geom_ribbon(aes(ymin = lower.mean, ymax = upper.mean), alpha = 0.2) +
  geom_path(linewidth = 1.2) +
  geom_hline(aes(yintercept = 0), color = "grey", linetype = "dashed") +
  geom_vline(aes(xintercept = 0), color = "grey", linetype = "dashed") +
  theme_bw() +
  facet_grid(coef ~ ., scales = "free_y") +
  theme(strip.text = element_text(face = "bold", size = rel(1.0))) +
  scale_x_continuous(name = "Days relative to sowing", breaks = breaks, labels = labels) +
  theme(axis.title.x = element_text(face = "bold", size = 11)) +
  ylab("Coefficient function") +
  theme(axis.title.y = element_text(face = "bold", size = 11))
  }
```

# Function-on-scalar regression {.tabset .tabset-fade .tabset-pills}

## Dew point

```{r function-on-scalar-d2m}
fANOVA(dat = data.prep(d2m))
```

## Mean air temperature

```{r function-on-scalar-t2m-mean}
fANOVA(dat = data.prep(t2m_mean))
```

## Max air temperature

```{r function-on-scalar-t2m-max}
fANOVA(dat = data.prep(t2m_max))
```

## Min air temperature

```{r function-on-scalar-t2m-min}
fANOVA(dat = data.prep(t2m_min))
```

## Max - Min air temperature

```{r function-on-scalar-tdiff}
fANOVA(dat = data.prep(tdiff))
```

## Temperature-Dewpoint depression

```{r function-on-scalar-dpd}
fANOVA(dat = data.prep(dpd))
```

## Soil temperature

```{r function-on-scalar-st}
fANOVA(dat = data.prep(st))
```

## Soil moisture

```{r function-on-scalar-sm}
fANOVA(dat = data.prep(sm))
```

## soil temperature:soil moisture ratio

```{r function-on-scalar-stsm}
fANOVA(dat = data.prep(stsm))
```

## Surface pressure

```{r function-on-scalar-sp}
fANOVA(dat = data.prep(sp))
```

## Relative humidity

```{r function-on-scalar-rh}
fANOVA(dat = data.prep(rh))
```

## VPD

```{r function-on-scalar-vpd}
fANOVA(dat = data.prep(vpd))
```

## Growing degree days

```{r function-on-scalar-gdd}
fANOVA(dat = data.prep(gdd))
```

------------------------------------------------------------------------


<!-- NEW SECTION: interval-wide tests -->

```{r fdatest-example-with-d2m, eval=FALSE}
# We will illustrate fdatest with the d2m variable.

# For fdatest, we need to create two separate matrices (for wm = 0 and wm = 1), which we can then put into a list for convenience.
wm0 <- 
  wm_data %>%
  dplyr::filter(wm == -1) %>%
  dplyr::select(subject, dap, d2m) %>%
  tidyr::pivot_wider(id_cols = subject, names_from = dap, names_prefix = "", values_from = d2m) %>%
  dplyr::select(-subject) %>%
  as.matrix()
# and ...
colnames(wm0) <- NULL

wm1 <- 
  wm_data %>%
  dplyr::filter(wm == 1) %>%
  dplyr::select(subject, dap, d2m) %>%
  tidyr::pivot_wider(id_cols = subject, names_from = dap, names_prefix = "", values_from = d2m) %>%
  dplyr::select(-subject) %>%
  as.matrix()
colnames(wm1) <- NULL

# Performing the ITP:
ITP.result <- fdatest::ITP2bspline(wm0, wm1, B = 100)

# The function generates a print line for each iteration. To suppress that, wrap within sink:
tic()
{ sink(type = "message"); ITP.result <- fdatest::ITP2bspline(wm0, wm1, B = 1000); sink() }
toc()  # 9.18 sec

# Plotting the results of the ITP:
# (there are two plots. The first is of the individual curves. The 2nd is of the adjusted p-values)
plot(ITP.result, main = NULL, xrange = c(1, 365), xlab = 'Day')

# Plotting the p-values heatmap
# (I'm not finding it all that telling)
ITPimage(ITP.result, abscissa.range = c(0, 1))

# Selecting the significant components at 5% level:
which(ITP.result$corrected.pval < 0.05)

# Which corresponds to the following days (relative to sowing, where sowing is day = 0):
seq(-30, 50)[31:32]

# NEXT:
# Take the above code, and wrap into functions to (i) prep the data for input into fdatest, (ii) calling the fdatest functions to estimate the adjusted p values
```


```{r fdatest-functions}
make_kable <- function(...) {
  # kable and kableExtra styling to avoid repetitively calling the styling over and over again
  # See: https://stackoverflow.com/questions/73718600/option-to-specify-default-kableextra-styling-in-rmarkdown
  # knitr::kable(...) %>%
  kable(..., format = "html", row.names = TRUE, align = 'l') %>%
    kable_styling(bootstrap_options = c("striped"), position = "left", font_size = 11, full_width = FALSE) 
}

do.fdatest <- function(x, alpha) {
  # Performs an Interval Testing Procedure for testing the difference between the two functional wm populations evaluated on a uniform grid
  #
  # Args:
  #  x = unquoted variable name, e.g. d2m
  #  alpha = numeric giving the p valaue level for the test, e.g. 0.05
  #
  # Returns:
  #   a tibble of the variable with a list vector of the days (relative to sowing) where the two populations differ functionally
  
  # Data prep for input to fdatest
  .x <- enquo(x)
  # wm0 = N x J matrix of the functional data for wm absent
  wm0 <- 
    wm_data %>%
    dplyr::filter(wm == -1) %>%
    dplyr::select(subject, dap, !!.x) %>%
    tidyr::pivot_wider(id_cols = subject, names_from = dap, names_prefix = "", values_from = !!.x) %>%
    dplyr::select(-subject) %>%
    as.matrix()
    # and ...
    colnames(wm0) <- NULL
    
  # wm1 = N x J matrix of the functional data for wm present  
  wm1 <- 
    wm_data %>%
    dplyr::filter(wm == 1) %>%
    dplyr::select(subject, dap, !!.x) %>%
    tidyr::pivot_wider(id_cols = subject, names_from = dap, names_prefix = "", values_from = !!.x) %>%
    dplyr::select(-subject) %>%
    as.matrix()
    colnames(wm1) <- NULL
  
  dat <- list(wm0 = wm0, wm1 = wm1)
  
  # The function generates a print line for each iteration. To suppress that, wrap within sink:
  # (set a seed for reproducibility)
  { sink(nullfile()); set.seed(86754309); foo <- ITP2bspline(dat$wm0, dat$wm1, B = 10000); sink() }

  # Selecting the significant components at the specified alpha level:
  # Which corresponds to the following days (relative to sowing, where sowing is day = 0):
  z <- seq(-30, 50)[which(foo$corrected.pval < alpha)]
  
  res <- tibble(var = rlang::as_name(.x), days = list(z))
  
  return(res)
}

# Example of use:
# do.fdatest(x = d2m, alpha = 0.05)

filter.iwt <- function(x) {
  # Filter the interval-wise testing results to see the days that were significant
  # Args:
  #  x = the series (quoted character string)
  # Returns:
  #  a vector of the days where the series was different between wm = 0 and wm = 1
  iwt |>
  dplyr::filter(var == x) |>
  purrr::pluck("days", 1)
}


zee <- function(series) {
  # Output the start and end days of significant windows within a time series
  # Args:
  #  series = quoted character name of the series
  # Returns:
  #  a table
  v <- 
    filter.iwt(x = series) %>% 
    split(., cumsum(c(1, diff(.) != 1)))
  
  # Create an empty data frame with three named columns:
  z <- data.frame(matrix(
    vector(), 0, 3, dimnames = list(c(), c("series", "start", "end"))), 
    stringsAsFactors = F)
  
  # Now loop over v to pick out the start and end of the continuous windows:
  for (i in 1:length(v)) {
    b <- purrr::pluck(v, i) %>%  dplyr::first()
    c <- purrr::pluck(v, i) %>%  dplyr::last()
    z[i, "series"] <- series
    z[i, "start"] <- b
    z[i, "end"] <- c
    } # end for loop
  return(z)
}

# Examples of use:
# zee("t2m_mean")
# zee("d2m")

#  Example of the workflow:
###---###
# tst.d2m <- do.fdatest(x = d2m)

# You could output this way:
# pluck(iwt.list, "tst.d2m") %>% 
#   make_kable()

# But this shows the windows in a cleaner format:  
# zee("d2m") %>% 
  # make_kable()
###---###

# Now we're ready to roll...
```


# Interval-wise tests {.tabset .tabset-fade .tabset-pills}
Perform the interval-wise tests

<!-- p = 0.05 -->
```{r do-interval-wise-tests-p05, eval=FALSE}
tst.d2m <- do.fdatest(x = d2m, alpha = 0.05)

tst.t2m_mean <- do.fdatest(x = t2m_mean, alpha = 0.05)

tst.t2m_max <- do.fdatest(x = t2m_max, alpha = 0.05)

tst.t2m_min <- do.fdatest(x = t2m_min, alpha = 0.05)

tst.tdiff <- do.fdatest(x = tdiff, alpha = 0.05)

tst.dpd <- do.fdatest(x = dpd, alpha = 0.05)

tst.st <- do.fdatest(x = st, alpha = 0.05)

tst.sm <- do.fdatest(x = sm, alpha = 0.05)

tst.stsm <- do.fdatest(x = stsm, alpha = 0.05)

tst.sp <- do.fdatest(x = sp, alpha = 0.05)

tst.rh <- do.fdatest(x = rh, alpha = 0.05)

tst.vpd <- do.fdatest(x = vpd, alpha = 0.05)

tst.gdd <- do.fdatest(x = gdd, alpha = 0.05)
```  

```{r save-the-results-p05, eval=FALSE}
# I want to put all the data frames into a list (to pass to bind_rows). Found the solution at:
# https://stackoverflow.com/questions/26738302/make-list-of-objects-in-global-environment-matching-certain-string-pattern
# so don't have to write them out one-by-one
Pattern1 <- grep("^tst.", names(.GlobalEnv), value = TRUE)
iwt.list <- do.call("list", mget(Pattern1))
# Don't need the tst. objects no more:
# rm(list = Pattern1)

# Now bind all the data frames into one:
iwt <- dplyr::bind_rows(iwt.list)

# Save iwt: 
save(iwt.list, iwt, file = here::here("FunctionalDataAnalysis", "FunctiononScalar", "iwt05.RData"))
```

<!-- p = 0.01 -->
```{r do-interval-wise-tests-p01, eval=FALSE}
tst.d2m <- do.fdatest(x = d2m, alpha = 0.01)

tst.t2m_mean <- do.fdatest(x = t2m_mean, alpha = 0.01)

tst.t2m_max <- do.fdatest(x = t2m_max, alpha = 0.01)

tst.t2m_min <- do.fdatest(x = t2m_min, alpha = 0.01)

tst.tdiff <- do.fdatest(x = tdiff, alpha = 0.01)

tst.dpd <- do.fdatest(x = dpd, alpha = 0.01)

tst.st <- do.fdatest(x = st, alpha = 0.01)

tst.sm <- do.fdatest(x = sm, alpha = 0.01)

tst.stsm <- do.fdatest(x = stsm, alpha = 0.01)

tst.sp <- do.fdatest(x = sp, alpha = 0.01)

tst.rh <- do.fdatest(x = rh, alpha = 0.01)

tst.vpd <- do.fdatest(x = vpd, alpha = 0.01)

tst.gdd <- do.fdatest(x = gdd, alpha = 0.01)
```  

```{r save-the-results-p01, eval=FALSE}
# I want to put all the data frames into a list (to pass to bind_rows). Found the solution at:
# https://stackoverflow.com/questions/26738302/make-list-of-objects-in-global-environment-matching-certain-string-pattern
# so don't have to write them out one-by-one
Pattern1 <- grep("^tst.", names(.GlobalEnv), value = TRUE)
iwt.list <- do.call("list", mget(Pattern1))
# Don't need the tst. objects no more:
# rm(list = Pattern1)

# Now bind all the data frames into one:
iwt <- dplyr::bind_rows(iwt.list)

# Save iwt: 
save(iwt.list, iwt, file = here::here("FunctionalDataAnalysis", "FunctiononScalar", "iwt01.RData"))
```


I've already done the interval-wise tests, so we'll just output the days that the test found to be significant. 

<!-- Some setups for processing and plotting later... -->
```{r iwt-some-setup}
# Create a vector of all the series names:
e <- c("t2m_mean", "t2m_max", "t2m_min", "tdiff", "d2m", "dpd", "sm", "st", "stsm", "sp", "rh", "vpd")

# Assign variable labels:
var_labels <- tribble(
  ~variable,      ~variable_label, 
  "d2m",       "Dewpoint (°C)",
  "t2m_mean",  "Mean air temperature (°C)",
  "t2m_max",   "Max. air temperature (°C)",
  "t2m_min",   "Min. air temperature (°C)",
  "tdiff",     "Max. - Min. air temperature (°C)",
  "dpd",       "Dew point depression (°C)",
  "st",        "Soil temperature (°C)",
  "sm",        "Soil moisture (m³/m³)",
  "stsm",      "Soil temperature:moisture ratio",
  "sp",        "Surface pressure (kPa)",
  "rh",        "Relative humidity (%)", 
  "vpd",       "Vapor pressure deficit (kPa)"
) %>% 
  tibble::deframe()
```


## P < 0.05 {.tabset .tabset-fade .tabset-pills}

<!-- Already did the interval-wise tests. Just load the results. -->
```{r load-the-p05-iwt-results}
load(here::here("FunctionalDataAnalysis", "FunctiononScalar", "iwt05.RData"))
```

### Dew point
```{r iwt-d2m-p05}
zee("d2m") %>% 
  make_kable()
```

### Mean air temperature
```{r iwt-t2m-mean-p05}
zee("t2m_mean") %>% 
  make_kable()
```

### Max air temperature
```{r iwt-t2m-max-p05}
zee("t2m_max") %>% 
  make_kable()
```

### Min air temperature
```{r iwt-t2m-min-p05}
zee("t2m_min") %>% 
  make_kable()
```

### Max - Min air temperature
```{r iwt-tdiff-p05}
zee("tdiff") %>% 
  make_kable()
```

### Temperature-Dewpoint depression
```{r iwt-dpd-p05}
zee("dpd") %>% 
  make_kable()
```

### Soil temperature
```{r iwt-st-p05}
zee("st") %>% 
  make_kable()
```

### Soil moisture
```{r iwt-sm-p05}
zee("sm") %>% 
  make_kable()
```

### soil temperature:soil moisture ratio
```{r iwt-stsm-p05}
zee("stsm") %>% 
  make_kable()
```

### Surface pressure
```{r iwt-sp-p05}
zee("sp") %>% 
  make_kable()
```

### Relative humidity
```{r iwt-rh-p05}
zee("rh") %>% 
  make_kable()
```

### VPD
```{r iwt-vpd-p05}
zee("vpd") %>% 
  make_kable()
```

<!-- ## Growing degree days -->
```{r iwt-gdd-p05, eval=FALSE, echo=FALSE}
zee("gdd") %>% 
  make_kable()
```

```{r parsing-the-results-p05, results='hide'}
# Let's use the filter.iwt function to have a look at the intervals that were significant (all series, ignoring gdd):
# air temperature-related
filter.iwt(x = "t2m_mean")
filter.iwt(x = "t2m_max")
filter.iwt(x = "t2m_min")
filter.iwt(x = "tdiff")
filter.iwt(x = "d2m") 
filter.iwt(x = "dpd")

# soil-related
filter.iwt(x = "sm")
filter.iwt(x = "st")
filter.iwt(x = "stsm")

# surface pressure
filter.iwt(x = "sp")

# moisture-related
filter.iwt(x = "rh")
filter.iwt(x = "vpd")

# We want to be able to cut the significant periods into continuous windows should those exist.
# The code to do so is adapted from here:
# https://stackoverflow.com/questions/5222061/create-grouping-variable-for-consecutive-sequences-and-split-vector
# Examples:
filter.iwt(x = "t2m_max") %>% split(., cumsum(c(1, diff(.) != 1)))
filter.iwt(x = "stsm") %>% split(., cumsum(c(1, diff(.) != 1)))


# What we're ultimately interested in is parsing the significant dates into any continuous segments.
# The find the start and end of these segments, so that we can input those to a dataframe for plotting. For that we use the function `zee` (see the functions chunk)

# Map over e and bind the rows:
g05 <- purrr::map(e, zee) |> list_rbind()
```




## P < 0.01 {.tabset .tabset-fade .tabset-pills}

<!-- Already did the interval-wise tests. Just load the results. -->
```{r load-the-p01-iwt-results}
load(here::here("FunctionalDataAnalysis", "FunctiononScalar", "iwt01.RData"))
```

### Dew point
```{r iwt-d2m-p01}
zee("d2m") %>% 
  make_kable()
```

### Mean air temperature
```{r iwt-t2m-mean-p01}
zee("t2m_mean") %>% 
  make_kable()
```

### Max air temperature
```{r iwt-t2m-max-p01}
zee("t2m_max") %>% 
  make_kable()
```

### Min air temperature
```{r iwt-t2m-min-p01}
zee("t2m_min") %>% 
  make_kable()
```

### Max - Min air temperature
```{r iwt-tdiff-p01}
zee("tdiff") %>% 
  make_kable()
```

### Temperature-Dewpoint depression
```{r iwt-dpd-p01}
zee("dpd") %>% 
  make_kable()
```

### Soil temperature
```{r iwt-st-p01}
zee("st") %>% 
  make_kable()
```

### Soil moisture
```{r iwt-sm-p01}
zee("sm") %>% 
  make_kable()
```

### soil temperature:soil moisture ratio
```{r iwt-stsm-p01}
zee("stsm") %>% 
  make_kable()
```

### Surface pressure
```{r iwt-sp-p01}
zee("sp") %>% 
  make_kable()
```

### Relative humidity
```{r iwt-rh-p01}
zee("rh") %>% 
  make_kable()
```

### VPD
```{r iwt-vpd-p01}
zee("vpd") %>% 
  make_kable()
```

<!-- ## Growing degree days -->
```{r iwt-gdd-p01, eval=FALSE, echo=FALSE}
zee("gdd") %>% 
  make_kable()
```

```{r parsing-the-results-p01, results='hide'}
# What we're ultimately interested in is parsing the significant dates into any continuous segments.
# The find the start and end of these segments, so that we can input those to a dataframe for plotting. For that we use the function `zee` (see the functions chunk)

# Map over e and bind the rows:
g01 <- purrr::map(e, zee) |> list_rbind()
```



# Summary of the test results {.tabset .tabset-fade .tabset-pills}
## P < 0.05
```{r plot-the-results-p05}
# Code for plotting the segments derived from here:
# https://stackoverflow.com/questions/35322919/grouped-data-by-factor-with-geom-segment

g05 %>% 
  ggplot(., aes(ymin = start, ymax = end, x = series)) + 
  # Changing the order on the x-axis for the categories:
  scale_x_discrete(limits = rev(c("t2m_mean", "t2m_max", "t2m_min", "tdiff", "d2m", "dpd", "sm", "st", "stsm", "sp", "rh", "vpd")), labels = var_labels, name = NULL) + 
  # Pay attention to layers. Do coord_flip first, then annotations to appear in the background, segment the topmost layer:
  coord_flip() +
  # Add some guides:
  geom_hline(aes(yintercept = 0), color = "grey", linetype = "dashed") +
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = 35, ymax = 50, fill = "steelblue", alpha = 0.2) +
    geom_linerange(colour = "grey20", position = position_dodge(width = 0.2), linewidth = 3, na.rm = TRUE) + 
    # theme_bw() +
    theme_half_open(font_size = 12)+
    labs(x = "Series", y = "Days relative to sowing") +
    theme(axis.title = element_text(face = "bold", size = 11))

ggsave("figs/fda_difference_period_p05.png", dpi = 600, bg = "white")
ggsave("figs/fda_difference_period_p05.pdf", dpi = 600, bg = "white")
```

## P < 0.01
```{r plot-the-results-p01}
# Code for plotting the segments derived from here:
# https://stackoverflow.com/questions/35322919/grouped-data-by-factor-with-geom-segment

g01 %>% 
  ggplot(., aes(ymin = start, ymax = end, x = series)) + 
  # Changing the order on the x-axis for the categories:
  scale_x_discrete(limits = rev(c("t2m_mean", "t2m_max", "t2m_min", "tdiff", "d2m", "dpd", "sm", "st", "stsm", "sp", "rh", "vpd")), labels = var_labels, name = NULL) + 
  # Pay attention to layers. Do coord_flip first, then annotations to appear in the background, segment the topmost layer:
  coord_flip() +
  # Add some guides:
  geom_hline(aes(yintercept = 0), color = "grey", linetype = "dashed") +
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = 35, ymax = 50, fill = "steelblue", alpha = 0.2) +
    geom_linerange(colour = "grey20", position = position_dodge(width = 0.2), linewidth = 3, na.rm = TRUE) + 
    # theme_bw() +
    theme_half_open(font_size = 12)+
    labs(x = "Series", y = "Days relative to sowing") +
    theme(axis.title = element_text(face = "bold", size = 11))
# ggsave("figs/fda_difference_period_p01.png", dpi = 600, bg = "white")
# ggsave("figs/fda_difference_period_p01.pdf", dpi = 600, bg = "white")
```




<!-- # Summary variables -->
```{r summary-variables, eval=FALSE}
weather_vars <- function(whichvar, start, end) {
  # Calculate the weather-based summary variable for each observation
  # Args:
  #  whichvar = unquoted character string of the variable (series), e.g., sm
  #  start = the start day relative to sowing
  #  end = the end day of the window relative to sowing
  # Returns:
  #  a data frame with two columns (subject, the weather-based summary variable)
  
  var <- enquo(whichvar)
  # Create a name for the column to hold the summary variable:
  var_name <- paste(rlang::as_name(var), start, end, sep = "_")
  
  wm_data %>%
    dplyr::select(subject, dap, !!var) %>%
    dplyr::filter(dap %in% c(start:end)) %>%
    dplyr::group_by(subject) %>%
    dplyr::summarise("{var_name}" := mean(!!var))
  } # end of function


# These are the variables and windows we'll create summaries for:
# t2m_mean  start = 0, end = 4
# sm start = -4, end = 3
# sm start = 5, end = 15
# sm start = 17, end = 24
# sm start = 40, end = 49
# stsm start = 35, end = 44

u <- weather_vars(whichvar = t2m_mean, start = 0, end = 4)
v <- weather_vars(whichvar = sm, start = -4, end = 3)
w <- weather_vars(whichvar = sm, start = 5, end = 15)
x <- weather_vars(whichvar = sm, start = 17, end = 24)
y <- weather_vars(whichvar = sm, start = 40, end = 49)
z <- weather_vars(whichvar = stsm, start = 35, end = 44)

weather.vars <- purrr::reduce(list(u, v, w, x, y, z), dplyr::left_join, by = "subject")

# Save the weather.vars data frame:
save(weather.vars, file = "WeatherVars.RData")
```



<!-- #  Further... -->
<!-- One issue that is of concern is the small nature of the dataset.  However, if we could generate artificial datasets, those could be used for model training. -->
<!-- [See this R package on GANs](https://github.com/mneunhoe/RGAN)  -->

## Session Info
```{r}
sessionInfo()
```

